# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create a new directory and enter it
mkd() {
    mkdir -p "$@" && cd "$@"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Safe rm function that prevents accidental deletion of critical directories
rm_safe() {
    # Iterate over the arguments
    for arg in "$@"; do
        # Check if the argument is the root directory "/"
        if [ "$arg" = "/" ]; then
            echo "Error: Attempt to remove the root directory is forbidden!"
            return 1
        fi

        # Check if the argument is any single directory in the root (e.g., "/bin", "/etc")
        if [[ "$arg" =~ ^/[^/]+$ ]]; then
            echo "Error: Attempt to remove a top-level directory is forbidden!"
            return 1
        fi

        # Check if the argument is the wildcard pattern "/*"
        if [ "$arg" = "/*" ]; then
            echo "Error: Attempt to remove all files and directories in the root is forbidden!"
            return 1
        fi
    done

    # Check if the arguments contain "--no-preserve-root"
    for arg in "$@"; do
        if [ "$arg" = "--no-preserve-root" ]; then
            echo "Error: Use of --no-preserve-root is forbidden!"
            return 1
        fi
    done

    # Run the actual rm command with the original arguments
    command rm "$@"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~piranha/dotfiles/.bashrc
# function extract {
#     if [ -f $1 ] ; then
#         case $1 in
#             *.tar.bz2)   tar xjf $1     ;;
#             *.tar.gz)    tar xzf $1     ;;
#             *.bz2)       bunzip2 $1     ;;
#             *.rar)       unrar e $1     ;;
#             *.gz)        gunzip $1      ;;
#             *.tar)       tar xf $1      ;;
#             *.tbz2)      tar xjf $1     ;;
#             *.tgz)       tar xzf $1     ;;
#             *.zip)       unzip $1       ;;
#             *.Z)         uncompress $1  ;;
#             *.7z)        7z x $1        ;;
#             *)           echo "'$1' cannot be extracted via extract()" ;;
#         esac
#     else
#         echo "'$1' is not a valid file"
#     fi
# }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Raspberry Pi specific functions
pi_temp() {
    vcgencmd measure_temp
}

pi_throttle() {
    vcgencmd get_throttled
}

pi_version() {
    cat /proc/device-tree/model
}

pi_info() {
    echo "=== Raspberry Pi Information ==="
    pi_version
    echo "Temperature: $(pi_temp)"
    echo "Throttle Status: $(pi_throttle)"
    echo "Uptime: $(uptime)"
    echo "Memory: $(free -h | grep Mem)"
    echo "Disk Usage: $(df -h / | tail -1)"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Server monitoring functions
server_status() {
    echo "=== Server Status ==="
    echo "Uptime: $(uptime)"
    echo "Load Average: $(cat /proc/loadavg)"
    echo "Memory Usage:"
    free -h
    echo "Disk Usage:"
    df -h
    echo "Network Connections:"
    ss -tuln
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Git functions
git_current_branch() {
    git rev-parse --abbrev-ref HEAD 2> /dev/null
}

git_log_oneline() {
    git log --oneline -10
}

git_status_short() {
    git status --short --branch
}
